/**
 * Immobilien Form Data Structure
 * Based on immo-form-template.json
 */

// Personal Details Section
export interface PersonalDetails {
  firstName: string;
  lastName: string;
  email: string;
  phoneNumber: string;
  dateOfBirth: string;
  address: string;
  city: string;
  postalCode: string;
  country: string;
  maritalStatus: string;
  numberOfDependents: number;
  nationality?: string;
  birthPlace?: string;
  identificationNumber?: string;
  coachId?: string;
  applicantType: 'PrimaryApplicant' | 'SecondaryApplicant';
  personalId?: string; // Filled by the system
}

// Employment Details Section
export interface EmploymentDetails {
  personalId?: string;  // Reference to the person
  employmentId?: string; // Filled by the system
  employmentType: string; // employed, selfEmployed, unemployed, retired, student, other
  occupation: string;
  employerName: string;
  contractType: string; // permanent, temporary, partTime, fullTime, freelance, other
  contractDuration?: string;
  employedSince: string | Date;
}

// Income Details Section
export interface IncomeDetails {
  personalId?: string;  // Reference to the person
  monthlyNetIncome: number;
  annualGrossIncome: number;
  additionalIncome?: number;
  additionalIncomeSource?: string;
  rentalIncome?: number;
  investmentIncome?: number;
  taxClass?: string;
  taxId?: string;
  numberOfSalaries?: number;
  childBenefit?: number;
  incomeTradeBusiness?: number;
  incomeSelfEmployedWork?: number;
  incomeSideJob?: number;
}

// Expenses Details Section
export interface ExpensesDetails {
  personalId?: string;  // Reference to the person
  housingExpenses: number;
  utilityBills: number;
  insurancePayments: number;
  transportationCosts: number;
  livingExpenses: number;
  otherExpenses?: number;
  coldRent?: number;
  electricity?: number;
  gas?: number;
  telecommunication?: number;
  accountMaintenanceFee?: number;
  alimony?: number;
  subscriptions?: number;
}

// Assets Section
export interface Assets {
  personalId?: string;  // Reference to the person
  cashAndSavings: number;
  investments?: number;
  realEstateProperties?: number;
  vehicles?: number;
  otherAssets?: number;
  securities?: number;
  bankDeposits?: number;
  buildingSavings?: number;
  insuranceValues?: number;
}

// Liabilities Section
export interface Liabilities {
  personalId?: string;  // Reference to the person
  mortgages?: number;
  carLoans?: number;
  consumerLoans?: number;
  creditCardDebt?: number;
  studentLoans?: number;
  otherLiabilities?: number;
  loanType?: string;
  loanBank?: string;
  loanAmount?: number;
  loanMonthlyRate?: number;
  loanInterest?: number;
}

// Property Details Section
export interface PropertyDetails {
  propertyType: string;
  propertyAddress: string;
  propertyCity: string;
  propertyPostalCode: string;
  propertyPrice: number;
  constructionYear: number;
  livingArea: number;
  landArea?: number;
  numberOfRooms: number;
  numberOfBathrooms: number;
}

// Loan Details Section
export interface LoanDetails {
  loanAmount: number;
  downPayment: number;
  loanTerm: string; // in years
  interestRateType: 'Fixed' | 'Variable' | 'Mixed';
  fixedRatePeriod?: string; // in years
  propertyPurpose: 'Primary Residence' | 'Secondary/Vacation Home' | 'Investment Property';
}

// Consent Section - Common for both applicants
export interface Consent {
  signature: string;
  signatureImageURL?: string;
  date: string;
  place: string;
  agreed: boolean;
  consentType?: string;
  consentText?: string;
  location?: string;
}

// Documents Section
export interface Document {
  id: string;
  name: string;
  description: string;
  required: boolean;
  fileUrl?: string;
  uploadDate?: string;
  status?: 'Pending' | 'Uploaded' | 'Verified' | 'Rejected';
}

// Form Metadata
export interface FormMetadata {
  formId?: string; // Generated by system
  formType: string;
  formName: string;
  status: 'Draft' | 'Submitted' | 'Under Review' | 'Approved' | 'Rejected';
  submittedAt?: string;
  updatedAt?: string;
  userId?: string;
}

// Complete Immobilien Form Data
export interface ImmobilienFormData {
  metadata: FormMetadata;
  primaryApplicant: {
    personal: PersonalDetails;
    employment: EmploymentDetails;
    income: IncomeDetails;
    expenses: ExpensesDetails;
    assets: Assets;
    liabilities: Liabilities;
  };
  secondaryApplicant?: {
    personal: PersonalDetails;
    employment: EmploymentDetails;
    income: IncomeDetails;
    expenses: ExpensesDetails;
    assets: Assets;
    liabilities: Liabilities;
  };
  property: PropertyDetails;
  loan: LoanDetails;
  consent: Consent;
  documents: Document[];
}

/**
 * Creates an empty Immobilien form data structure with default values
 * @param userId User ID for the form
 * @param formName Optional form name
 * @returns A new Immobilien form data structure
 */
export function createEmptyImmobilienForm(userId?: string, formName = 'Immobilien Antrag'): ImmobilienFormData {
  const currentDate = new Date().toISOString();
  
  return {
    metadata: {
      formType: 'Immobilien',
      formName: formName,
      status: 'Draft',
      submittedAt: currentDate,
      updatedAt: currentDate,
      userId: userId
    },
    primaryApplicant: {
      personal: {
        firstName: '',
        lastName: '',
        email: '',
        phoneNumber: '',
        dateOfBirth: '',
        address: '',
        city: '',
        postalCode: '',
        country: 'Germany',
        maritalStatus: '',
        numberOfDependents: 0,
        applicantType: 'PrimaryApplicant'
      },
      employment: {
        employmentType: 'employed',
        occupation: '',
        employerName: '',
        contractType: '',
        employedSince: ''
      },
      income: {
        monthlyNetIncome: 0,
        annualGrossIncome: 0
      },
      expenses: {
        housingExpenses: 0,
        utilityBills: 0,
        insurancePayments: 0,
        transportationCosts: 0,
        livingExpenses: 0
      },
      assets: {
        cashAndSavings: 0
      },
      liabilities: {}
    },
    property: {
      propertyType: '',
      propertyAddress: '',
      propertyCity: '',
      propertyPostalCode: '',
      propertyPrice: 0,
      constructionYear: 0,
      livingArea: 0,
      numberOfRooms: 0,
      numberOfBathrooms: 0
    },
    loan: {
      loanAmount: 0,
      downPayment: 0,
      loanTerm: '30',
      interestRateType: 'Fixed',
      propertyPurpose: 'Primary Residence'
    },
    consent: {
      signature: '',
      date: currentDate.split('T')[0],
      place: '',
      agreed: false
    },
    documents: [
      {
        id: 'idCard',
        name: 'ID Card or Passport',
        description: 'A copy of your government-issued identification',
        required: true,
        status: 'Pending'
      },
      {
        id: 'salarySlips',
        name: 'Salary Slips',
        description: 'Last 3 months of salary slips',
        required: true,
        status: 'Pending'
      },
      {
        id: 'bankStatements',
        name: 'Bank Statements',
        description: 'Last 3 months of bank statements',
        required: true,
        status: 'Pending'
      },
      {
        id: 'employmentContract',
        name: 'Employment Contract',
        description: 'Current employment contract',
        required: true,
        status: 'Pending'
      }
    ]
  };
}

/**
 * Maps form data to API format for submission
 * @param formData ImmobilienFormData
 * @returns API-compatible client form data
 */
export function mapToApiFormat(formData: ImmobilienFormData): any {
  const { primaryApplicant, secondaryApplicant, property, loan, consent, documents, metadata } = formData;
  
  // Create the API format object
  return {
    formType: metadata.formType,
    formName: metadata.formName,
    formData: {
      primaryApplicant: {
        personal: {
          ...primaryApplicant.personal,
          dateOfBirth: typeof primaryApplicant.personal.dateOfBirth === 'string' 
            ? primaryApplicant.personal.dateOfBirth.split('T')[0] 
            : primaryApplicant.personal.dateOfBirth instanceof Date
              ? primaryApplicant.personal.dateOfBirth.toISOString().split('T')[0]
              : ''
        },
        employment: {
          ...primaryApplicant.employment,
          employedSince: typeof primaryApplicant.employment.employedSince === 'string'
            ? primaryApplicant.employment.employedSince.split('T')[0]
            : primaryApplicant.employment.employedSince instanceof Date
              ? primaryApplicant.employment.employedSince.toISOString().split('T')[0]
              : ''
        },
        income: primaryApplicant.income,
        expenses: primaryApplicant.expenses,
        assets: primaryApplicant.assets,
        liabilities: primaryApplicant.liabilities
      },
      ...(secondaryApplicant && {
        secondaryApplicant: {
          personal: {
            ...secondaryApplicant.personal,
            dateOfBirth: secondaryApplicant.personal.dateOfBirth.split('T')[0] // Ensure proper date format
          },
          employment: {
            ...secondaryApplicant.employment,
            employedSince: secondaryApplicant.employment.employedSince.split('T')[0] // Ensure proper date format
          },
          income: secondaryApplicant.income,
          expenses: secondaryApplicant.expenses,
          assets: secondaryApplicant.assets,
          liabilities: secondaryApplicant.liabilities
        }
      }),
      property,
      loan,
      consent: {
        ...consent,
        date: consent.date.split('T')[0] // Ensure proper date format
      },
      documents
    },
    status: metadata.status,
    userId: metadata.userId
  };
}

export default {
  createEmptyImmobilienForm,
  mapToApiFormat
}; 